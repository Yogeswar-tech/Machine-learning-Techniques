# Import necessary libraries
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import make_regression
from sklearn.metrics import r2_score

# Load the dataset
data = pd.read_csv('newval.csv')

# Define the features and target variables
features =data[['Distortion']] 

target = data[['Power','Speed','Flow']]

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train the random forest regression model
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = rf.predict(X_test)

# Evaluate the model performance
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
plt.scatter(y_test, y_pred, alpha=0.5)

plt.plot(['features'],['target'])

# Set the title and axis labels
plt.title('Data Plot')
plt.xlabel('X values')
plt.ylabel('Y values')

# Show the graph
plt.show() # graph shows based on data



# Print the evaluation metrics
print("Mean Squared Error (MSE): ", mse)
print("Mean Absolute Error (MAE): ", mae)
print("R-squared (RÂ²): ", r2)

# Create a bar graph to display the RMSE, MSE, and R2 values
labels = ['mae', 'MSE', 'r2']
values = [mae, mse, r2]
plt.bar(labels, values)

# Add the numerical values to the graph
for i, value in enumerate(values):
    plt.text(i, value, str(round(value, 2)), ha='center', fontsize=12)

# Set the title and axis labels
plt.title('Random Forest Regression Model Metrics')
plt.xlabel('Metric')
plt.ylabel('Value')

# Show the graph
plt.show()

plt.scatter(y_test, y_pred)
plt.xlabel('Actual values')
plt.ylabel('Predicted values')
plt.title('Random Forest Regression: Predicted vs Actual')
plt.show()


